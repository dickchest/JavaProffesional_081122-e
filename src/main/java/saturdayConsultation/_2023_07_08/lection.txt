При производстве приложения мы пользуемся:
1. Архитектурный патерн
2. принципы Solid


Solid (аббревиатура) - SOLID также может быть аббревиатурой, которая представляет собой набор принципов объектно-ориентированного программирования,
разработанных для создания гибкого и легкого в обслуживании кода. SOLID означает следующее:

Вот расшифровка акронима SOLID и краткое описание каждого принципа:

Single Responsibility Principle (Принцип единственной ответственности):
Каждый класс или модуль должен иметь только одну ответственность. Это означает, что класс должен быть специализированным для выполнения только одной задачи или функции. Это упрощает понимание, тестирование и поддержку кода.

Open/Closed Principle (Принцип открытости/закрытости):
Программные сущности, такие как классы, модули или функции, должны быть открыты для расширения, но закрыты для модификации. Это достигается путем использования абстракций, интерфейсов и наследования, чтобы добавлять новую функциональность без изменения существующего кода.

Liskov Substitution Principle (Принцип подстановки Лисков):
Этот принцип гласит, что объекты в программе должны быть заменяемыми на экземпляры их подтипов без изменения правильности самой программы. То есть, если у нас есть класс и от него наследуются другие классы, то экземпляры этих классов могут быть использованы в коде без изменения ожидаемого поведения.

Interface Segregation Principle (Принцип разделения интерфейса):
Клиенты не должны зависеть от интерфейсов, которые они не используют. Вместо того, чтобы создавать общие интерфейсы, которые содержат множество методов, этот принцип рекомендует создавать специфические интерфейсы, которые содержат только методы, необходимые конкретному клиенту.

Dependency Inversion Principle (Принцип инверсии зависимостей):
Модули верхнего уровня не должны зависеть от модулей нижнего уровня. Оба типа модулей должны зависеть от абстракций. Это принцип рекомендует использовать инверсию зависимостей, когда абстракции определяют контракты между модулями, а реализация зависит от этих абстракций.



Hibernate является фреймворком для объектно-реляционного отображения (ORM), который облегчает взаимодействие с базами данных в приложениях, написанных на языке Java. Для работы с Hibernate требуется определение сущностей (entities) - классов, которые отображают таблицы базы данных.

Вот некоторые общие требования и рекомендации для определения сущностей в Hibernate:

Аннотации или XML-конфигурация: Hibernate позволяет определять сущности с использованием аннотаций, а также с помощью XML-конфигурации. Выбор между ними зависит от предпочтений и требований вашего проекта.

Классы сущностей должны быть публичными: Классы, которые представляют сущности, должны быть объявлены как публичные, чтобы Hibernate мог получить к ним доступ.

Уникальный идентификатор (Primary Key): Каждая сущность должна иметь уникальный идентификатор, который обычно представляет собой поле класса, отмеченное аннотацией @Id или определенное в XML-конфигурации.

Отображение атрибутов: Атрибуты классов сущностей могут отображаться на столбцы в базе данных. Вы можете использовать аннотации, такие как @Column, для определения соответствия между атрибутами и столбцами, а также задавать различные атрибуты, такие как имя столбца, тип данных и т. д.

Отношения между сущностями: Если у вас есть связи между таблицами в базе данных, вы должны определить отношения между соответствующими сущностями в Hibernate. Например, вы можете использовать аннотации @OneToOne, @OneToMany, @ManyToOne или @ManyToMany для определения отношений один-к-одному, один-ко-многим, многие-к-одному или многие-ко-многим соответственно.

Жизненный цикл: Сущности в Hibernate имеют свой жизненный цикл, который включает состояния, такие как transient, persistent, detached и removed. Вам может потребоваться настроить соответствующие аннотации или использовать методы API Hibernate для управления жизненным циклом сущностей.

Дополнительные настройки: Hibernate предлагает множество дополнительных настроек, таких как настройки кэширования, ленивая загрузка (lazy loading), стратегии именования и т. д. В зависимости от требований вашего проекта, вам может потребоваться использовать эти настройки для оптимизации работы с базой данных.

Важно отметить, что вышеперечисленные требования и настройки являются общими рекомендациями, и конкретные требования могут различаться в зависимости от вашего проекта и используемых версий Hibernate. Рекомендуется ознакомиться с официальной документацией Hibernate для получения более подробной информации и примеров.


По базам данным обязательно нужно знать:
- ЗАПРОСЫ
- ACID принципы
- уровни изоляций транзакций в БД

ACID (Atomicity - атомарность, consistency - консистентность, isolation - изолированность, durability - стойкость) это стандартный набор свойств, которые гарантируют, надежность транзакции.

Типы состояний ентити
